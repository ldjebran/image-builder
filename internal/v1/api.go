// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	ImageName *string     `json:"image_name,omitempty"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Filesystem          *[]Filesystem `json:"filesystem,omitempty"`
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// List of Distributions
const (
	Distributions_centos_8 Distributions = "centos-8"
	Distributions_centos_9 Distributions = "centos-9"
	Distributions_rhel_84  Distributions = "rhel-84"
	Distributions_rhel_85  Distributions = "rhel-85"
	Distributions_rhel_86  Distributions = "rhel-86"
	Distributions_rhel_90  Distributions = "rhel-90"
)

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       string              `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution Distributions `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
