// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// FindAllPackagesBodyRequest defines model for FindAllPackagesBodyRequest.
type FindAllPackagesBodyRequest struct {
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string  `json:"name"`
	RepoId  *string `json:"repo_id,omitempty"`
	Summary string  `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count               int           `json:"count"`
		PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	GpgKey     *string `json:"gpg_key,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// FindAllPackagesJSONBody defines parameters for FindAllPackages.
type FindAllPackagesJSONBody FindAllPackagesBodyRequest

// FindAllPackagesParams defines parameters for FindAllPackages.
type FindAllPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// FindAllPackagesRequestBody defines body for FindAllPackages for application/json ContentType.
type FindAllPackagesJSONRequestBody FindAllPackagesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// find all packages
	// (POST /packages)
	FindAllPackages(ctx echo.Context, params FindAllPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// FindAllPackages converts echo context to params.
func (w *ServerInterfaceWrapper) FindAllPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindAllPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindAllPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.POST("/packages", wrapper.FindAllPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0TsAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
