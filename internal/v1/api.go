// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string      `json:"created_at"`
	Id        string      `json:"id"`
	Request   interface{} `json:"request"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       string        `json:"status"`
	UploadStatus *UploadStatus `json:"upload_status,omitempty"`
}

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List of ImageTypes
const (
	ImageTypes_ami                 ImageTypes = "ami"
	ImageTypes_aws                 ImageTypes = "aws"
	ImageTypes_azure               ImageTypes = "azure"
	ImageTypes_edge_commit         ImageTypes = "edge-commit"
	ImageTypes_edge_container      ImageTypes = "edge-container"
	ImageTypes_edge_installer      ImageTypes = "edge-installer"
	ImageTypes_gcp                 ImageTypes = "gcp"
	ImageTypes_guest_image         ImageTypes = "guest-image"
	ImageTypes_image_installer     ImageTypes = "image-installer"
	ImageTypes_rhel_edge_commit    ImageTypes = "rhel-edge-commit"
	ImageTypes_rhel_edge_installer ImageTypes = "rhel-edge-installer"
	ImageTypes_vhd                 ImageTypes = "vhd"
	ImageTypes_vsphere             ImageTypes = "vsphere"
)

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	GpgKey     *string `json:"gpg_key,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {

	// max amount of composes, default 100
	Limit *int `json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {

	// distribution to look up packages for
	Distribution string `json:"distribution"`

	// architecture to look up packages for
	Architecture string `json:"architecture"`

	// packages to look for
	Search string `json:"search"`

	// max amount of packages, default 100
	Limit *int `json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `json:"offset,omitempty"`
}

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes", wrapper.GetComposes)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/packages", wrapper.GetPackages)
	router.GET("/ready", wrapper.GetReadiness)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cRJsr7f/DAAA//9xk6WdKzYAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
